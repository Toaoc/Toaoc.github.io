<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Toao</title>
  
  
  <link href="https://toaoc.github.io/atom.xml" rel="self"/>
  
  <link href="https://toaoc.github.io/"/>
  <updated>2020-12-08T15:23:02.284Z</updated>
  <id>https://toaoc.github.io/</id>
  
  <author>
    <name>Toao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>滑动窗口算法</title>
    <link href="https://toaoc.github.io/2020/12/08/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%AE%97%E6%B3%95/"/>
    <id>https://toaoc.github.io/2020/12/08/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%AE%97%E6%B3%95/</id>
    <published>2020-12-08T15:01:45.000Z</published>
    <updated>2020-12-08T15:23:02.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="滑动窗口算法"><a href="#滑动窗口算法" class="headerlink" title="滑动窗口算法"></a>滑动窗口算法</h1><p><a href="https://labuladong.gitbook.io/algo/di-ling-zhang-bi-du-xi-lie/hua-dong-chuang-kou-ji-qiao-jin-jie" target="_blank" rel="noopener">https://labuladong.gitbook.io/algo/di-ling-zhang-bi-du-xi-lie/hua-dong-chuang-kou-ji-qiao-jin-jie</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;滑动窗口算法&quot;&gt;&lt;a href=&quot;#滑动窗口算法&quot; class=&quot;headerlink&quot; title=&quot;滑动窗口算法&quot;&gt;&lt;/a&gt;滑动窗口算法&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://labuladong.gitbook.io/algo/di-ling-zh</summary>
      
    
    
    
    <category term="算法" scheme="https://toaoc.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>数据库模式与视图</title>
    <link href="https://toaoc.github.io/2020/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%A1%E5%BC%8F%E4%B8%8E%E8%A7%86%E5%9B%BE/"/>
    <id>https://toaoc.github.io/2020/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%A1%E5%BC%8F%E4%B8%8E%E8%A7%86%E5%9B%BE/</id>
    <published>2020-12-08T11:59:44.000Z</published>
    <updated>2020-12-08T13:02:47.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库模式与视图"><a href="#数据库模式与视图" class="headerlink" title="数据库模式与视图"></a>数据库模式与视图</h1><h2 id="数据库模式"><a href="#数据库模式" class="headerlink" title="数据库模式"></a>数据库模式</h2><h3 id="三级模式"><a href="#三级模式" class="headerlink" title="三级模式"></a>三级模式</h3><p><img src="/images/schma.jpg" alt=""></p><p>​        用户从三个层次来管理数据：外部层次（External Level）、概念层次（Conceptual Level）和内部层次（Internal Level）。其中外部层次的数据就是用户所看到的数据，所以又叫用户层次。概念层次的数据是DBMS中全局管理数据和数据之间的约束，所以又叫逻辑层次。内部层次的数据是存储在介质上的数据，包括存储路径、存储方式、<strong>索引</strong>方式等，所以又叫物理层次。</p><h4 id="内模式"><a href="#内模式" class="headerlink" title="内模式"></a>内模式</h4><p>​        又称物理模式，是数据存储方式和物理结构在数据库内部的组织方式。如记录存储方式是堆存储，还是按照某些属性值升降序存储，还是按章属性值聚簇存储。索引的组织方式，是B+树索引还是hash索引或其他等等。</p><ol><li>一个数据库只能有一个内模式，因为一个数据库对应的存储方式、路径只能有一个。</li></ol><h4 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h4><p>​        也称为逻辑模式或概念模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。实际应用中模式等同于程序员创建一个具体的数据库的全部操作，如：这是一个MySQL数据库，有两张表，每个表的名字，属性的名字、类型、取值范围，主键、外键、索引等。</p><ol><li>一个数据库只有一个模式，因为模式是DBMS对所有数据的全局性的结构描述，所以只能有一种形式，如不使用两张不同结构的学生表存放的都是所有学生的信息。</li><li>定义模式时不仅要定义数据的逻辑结构（如类型、名字等），而且要定义与数据有关的安全性、完整性要求，定义这些数据之间的联系</li></ol><h4 id="外模式"><a href="#外模式" class="headerlink" title="外模式"></a>外模式</h4><p>​        以视图的形式展示给用户，是保证数据库安全性的有力措施。是数据库的数据视图。</p><ol><li>一个数据库可有多个外模式，如不同用户可以对同一份数据的所需数据可能不同或用户的权限不同等。</li></ol><h3 id="使用概述"><a href="#使用概述" class="headerlink" title="使用概述"></a>使用概述</h3><p>数据库产品中的schema并不对应三级模式中的模式，如postgre中的模式可以看作是一个表的集合，其可以包含视图、索引、数据类型、函数和操作符等。以下的话是针对类似postgre的模式的。</p><p>一个数据库可以有多个模式</p><p>一个模式下可以有多个表</p><p>表必须被放在模式中，一般默认放在public模式中</p><p>用户有自己的默认模式</p><p>可通过create schema创建模式</p><p>模式访问：数据库.模式名</p><h2 id="数据库视图"><a href="#数据库视图" class="headerlink" title="数据库视图"></a>数据库视图</h2><p>​        数据库视图是用户可以看见的虚关系，是从一个或几个表导出的虚表。数据库中只存放视图的定义（位于数据字典中），不存放视图对应的数据（数据位于其他表中），也称为动态窗口。</p><p>​        视图也可以增删改查，但可能会有一定的限制。如加上check option的视图就要满足相应条件才能update，有两个基本表导出的视图不能更新，来自字段表达式（函数）或常数的视图不允许插入和修改，但可以删除。</p><p>​        视图为数据库重构提供了一定的逻辑独立性，即用户-&gt;视图-&gt;表，这样如果表结构更改了可能也不用大规模修改。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据库模式与视图&quot;&gt;&lt;a href=&quot;#数据库模式与视图&quot; class=&quot;headerlink&quot; title=&quot;数据库模式与视图&quot;&gt;&lt;/a&gt;数据库模式与视图&lt;/h1&gt;&lt;h2 id=&quot;数据库模式&quot;&gt;&lt;a href=&quot;#数据库模式&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="数据库" scheme="https://toaoc.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>两数相加</title>
    <link href="https://toaoc.github.io/2020/09/08/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>https://toaoc.github.io/2020/09/08/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</id>
    <published>2020-09-08T10:25:46.000Z</published>
    <updated>2020-09-08T10:34:02.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-两数相加"><a href="#leetcode-两数相加" class="headerlink" title="leetcode: 两数相加"></a>leetcode: 两数相加</h1><p>对于链表长度头部未知的，可在头部前多设一个节点来快速获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode temList1,temList2,newList,newTemList;</span><br><span class="line">        temList1 = l1;</span><br><span class="line">        temList2 = l2;</span><br><span class="line">        <span class="keyword">int</span> carryBit = <span class="number">0</span>, newBit = <span class="number">0</span>;</span><br><span class="line">        newList = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        newTemList = newList;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temList1 == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(temList2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    newBit = temList2.val + carryBit;</span><br><span class="line">                    <span class="keyword">if</span>(newBit &gt; <span class="number">9</span>)&#123;</span><br><span class="line">                        carryBit = <span class="number">1</span>;</span><br><span class="line">                        newBit = newBit - <span class="number">10</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        carryBit = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    newTemList.next = <span class="keyword">new</span> ListNode(newBit);</span><br><span class="line">                    newTemList = newTemList.next;</span><br><span class="line">                    temList2 = temList2.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temList2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(temList1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    newBit = temList1.val + carryBit;</span><br><span class="line">                    <span class="keyword">if</span>(newBit &gt; <span class="number">9</span>)&#123;</span><br><span class="line">                        carryBit = <span class="number">1</span>;</span><br><span class="line">                        newBit = newBit - <span class="number">10</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        carryBit = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    newTemList.next = <span class="keyword">new</span> ListNode(newBit);</span><br><span class="line">                    newTemList = newTemList.next;</span><br><span class="line">                    temList1 = temList1.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            newBit = temList1.val + temList2.val + carryBit;</span><br><span class="line">            <span class="keyword">if</span>(newBit &gt; <span class="number">9</span>)&#123;</span><br><span class="line">                carryBit = <span class="number">1</span>;</span><br><span class="line">                newBit = newBit - <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                carryBit = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            newTemList.next = <span class="keyword">new</span> ListNode(newBit);</span><br><span class="line">            newTemList = newTemList.next;</span><br><span class="line">            temList1 = temList1.next;</span><br><span class="line">            temList2 = temList2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(carryBit == <span class="number">1</span>)&#123;</span><br><span class="line">            newTemList.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newList.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcode-两数相加&quot;&gt;&lt;a href=&quot;#leetcode-两数相加&quot; class=&quot;headerlink&quot; title=&quot;leetcode: 两数相加&quot;&gt;&lt;/a&gt;leetcode: 两数相加&lt;/h1&gt;&lt;p&gt;对于链表长度头部未知的，可在头部前多设一个节点来</summary>
      
    
    
    
    <category term="leetcode" scheme="https://toaoc.github.io/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>tex</title>
    <link href="https://toaoc.github.io/2020/05/21/tex/"/>
    <id>https://toaoc.github.io/2020/05/21/tex/</id>
    <published>2020-05-21T12:03:05.000Z</published>
    <updated>2020-05-21T15:52:57.750Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tex的一些笔记"><a href="#Tex的一些笔记" class="headerlink" title="Tex的一些笔记"></a>Tex的一些笔记</h2><h3 id="宏语言"><a href="#宏语言" class="headerlink" title="宏语言"></a>宏语言</h3><h4 id="宏来源"><a href="#宏来源" class="headerlink" title="宏来源"></a>宏来源</h4><p>​    在早期使用汇编语言进行编程的时候，程序员发现程序中包含了很多重复的代码，于是他们创造了这种简单的方法来重用。</p><h4 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h4><p>​    可简单理解为用较短指令表示较长指令，在编程语言中不常用，在文字处理中很常用。</p><h3 id="Tex简介"><a href="#Tex简介" class="headerlink" title="Tex简介"></a>Tex简介</h3><p>​    Tex就是一种宏语言，主要应用于文字排版，百度百科就把tex说为一种排版系统，可以把这个程序看作为编译器。</p><p>​    Tex源文件的后缀是.tex,就是使用代码来规定文字样式，作用类似HTML，不过其功能更丰富，尤其是对数学公式的表示。一段tex文件如下：</p><p><code>\documentclass{article}</code></p><p><code>\usepackage{xeCJK} %调用 xeCJK 宏包\setCJKmainfont{SimSun} %设置 CJK 主字体为 SimSun （宋体）\begin{document}你好，world!\end{document}</code> </p><p>最总就是显示相应样式的“你好，world！”</p><h4 id="Tex的一些种类及命令"><a href="#Tex的一些种类及命令" class="headerlink" title="Tex的一些种类及命令"></a>Tex的一些种类及命令</h4><ol><li>plain Tex： Tex中最基本的宏集合和基础语言构成的一种格式。</li><li>LaTex： Tex的一个宏集合，构成一种与plain Tex不一样的格式。</li><li>pdfTex： Tex的又一个实现，能将Tex语言直接编译成pdf文件。</li><li>XeTex： 适应了Unicode字符集。</li><li>xetex命令： 用于编译plain tex编写的文件，分两阶段处理，第一阶段输出DVI（xdv）文件，第二阶段由驱动生成pdf文件。</li><li>xelatex命令： 用于编译LaTex编写的文件，也是生成pdf文件。</li><li>宏包：一般是在Tex或LaTex下面编写的宏，然后将其打印成包。 </li></ol><h4 id="Tex的一些散装笔记"><a href="#Tex的一些散装笔记" class="headerlink" title="Tex的一些散装笔记"></a>Tex的一些散装笔记</h4><ol><li>使用Tex来写论文比word好，因为其有模板，可直接套用。</li><li>可使用LaTex写源代码，然后用pdfTex编译为pdf</li><li>cls文件： 类文件，规定了tex源文件的排版格式，一般使用\documentclass{}导入</li><li>sty文件： 宏包文件，使用\usepackage{}导入</li><li>bst文件： 参考文件，使用\bibliographystyle{}导入</li><li>bib文件： 参考文献的库，使用\bibliography{}导入</li><li>aux文件： 辅助文件，不影响正常使用</li><li>dtx文件： 宏包重要部分</li><li>ins文件： 控制从dtx文件中释放宏包文件</li><li>cfg文件： 配置文件，可有以上两个文件生成</li><li>对于有参考文献、目录排版的lex文件（如使用biblatex），需要用xelatex编译两次，第一次生成无文献、无目录的pdf文件，然后第二遍读入参考文献和目录并正确生成引用和目录表。</li></ol><h4 id="使用MikTex的一些问题"><a href="#使用MikTex的一些问题" class="headerlink" title="使用MikTex的一些问题"></a>使用MikTex的一些问题</h4><ol><li><p>直接使用使用xelatex命令时报<code>dvipdfmx:fatal: File ended prematurely</code> 错误，可能是环境不是UTF-8的问题，一般出现在中文环境中。执行以下命令即可解决：</p><p><code>chcp 65001;</code></p><p><code>xelatex --shell-escape tex文件</code> </p></li><li><p>出现<code>! TeX capacity exceeded, sorry [main memory size=3000000].</code> 错误，一个解决方法如下：</p><ol><li>运行cmd打开命令行窗口，输入：<code>initexmf --edit-config-file=xelatex</code></li><li>在弹出的文件中输入以下内容：<code>main_memory=5000000 extra_mem_bot=5000000  font_mem_size=5000000 pool_size=5000000 buf_size=5000000</code></li><li>在cmd窗口输入： <code>initexmf --dump=pdflatex</code> 更新latex格式文件</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Tex的一些笔记&quot;&gt;&lt;a href=&quot;#Tex的一些笔记&quot; class=&quot;headerlink&quot; title=&quot;Tex的一些笔记&quot;&gt;&lt;/a&gt;Tex的一些笔记&lt;/h2&gt;&lt;h3 id=&quot;宏语言&quot;&gt;&lt;a href=&quot;#宏语言&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="编译原理" scheme="https://toaoc.github.io/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo的一些问题记录</title>
    <link href="https://toaoc.github.io/2020/05/20/test/"/>
    <id>https://toaoc.github.io/2020/05/20/test/</id>
    <published>2020-05-20T15:16:11.000Z</published>
    <updated>2020-12-08T13:04:58.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows下Hexo的一些问题记录"><a href="#Windows下Hexo的一些问题记录" class="headerlink" title="Windows下Hexo的一些问题记录"></a>Windows下Hexo的一些问题记录</h2><ol><li>CMD直接使用hexo只出现三种选项，如下</li></ol><p><img src="/images/image-20200520232143975.png" alt="image-20200520232143975"></p><p>​    解决方法：将进入Hexo的文件夹里再使用相关命令<img src="/images/image-20200520232759383.png" alt="image-20200520232759383"></p><ol start="2"><li><p>为Hexo的文章创建分类</p><ol><li><p><code>hexo new page &quot;Categories&quot;</code>,然后就会在source文件夹下生成Categories文件夹，里面有index.md。这个Categories对应的是所有分类项的页面，我们不需要主动添加分类项进去，只要你的markdown里的categories属性写了分类，该分类就会被添加到Categories页面。</p></li><li><p>对index.md的填写如下，comment代表评论</p><p><code>title: &#39; Categories &#39;date: 2020-05-20 22:06:04type: &quot;categories&quot;comments: false</code> </p></li><li><p>对于Next主题的，在hexo\themes\next_config.yml中去除categories前面的#号，并且检查<code>home: /</code></p><p>和<code>/categories/</code> 后是否有空格，有则去掉，否则会出现Cannot find /Categories/%20的错误</p><p><code>home: /|| home  #about: /about/ || user  #tags: /tags/ || tags  categories: /categories/|| th  archives: /archives/ || archive  #schedule: /schedule/ || calendar  #sitemap: /sitemap.xml || sitemap  #commonweal: /404/ || heartbeat</code>    </p></li><li><p>执行<code>hexo g</code> 和<code>hexo s</code> 在localhost:4000即可看到结果，然后<code>hexo d</code> 将修改上传到网页。</p></li></ol></li><li><p><strong>hexo对语法的检查很严格，开头的title这些信息冒号后面都需一个空格，否则会有Error</strong></p></li><li><p>对于由于git大小写问题出现的404，如url：/Categories/在GitHub上变为：/categories，把public文件夹里的Categories改为 categories即可</p></li><li><p>Hexo图片引用问题，在source目录下新建一个images文件夹，然后把图片放在里面用路径<code>/images/图片名</code> 进行引用即可，这个方法的Hexo的主页和文章详细页都可见，但在本地不可见,可先放里面，然后deploy，接着使用<code>https://toaoc.github.io/images/图片名</code> 即可引用。</p></li><li><p>Hexo使用categories标签才会出现在分类页面中，而不是Tags标签</p></li><li><p>博客的头部信息凑不用使用引号，即使是中文</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Windows下Hexo的一些问题记录&quot;&gt;&lt;a href=&quot;#Windows下Hexo的一些问题记录&quot; class=&quot;headerlink&quot; title=&quot;Windows下Hexo的一些问题记录&quot;&gt;&lt;/a&gt;Windows下Hexo的一些问题记录&lt;/h2&gt;&lt;ol&gt;
</summary>
      
    
    
    
    <category term="Hexo" scheme="https://toaoc.github.io/categories/Hexo/"/>
    
    
  </entry>
  
</feed>
